##########################Python code#############################################################
#Import Library
Import numpy as np
Import pands
#from sklearn import linear_model
from sklearn import datasets, linear_model
#Load Train and Test datasets
import csv, sys
with open('C:/Users/yo/Desktop/LR/train.csv','rb') as f:
    reader = csv.reader(f)
    import csv, sys
with open('C:/Users/yo/Desktop/LR/test.csv','tst') as f:
    reader = csv.reader(f)
    
#Identify feature and response variable(s) and values must be numeric and numpy arrays
x_train=input_variables_values_training_datasets
y_train=target_variables_values_training_datasets
x_test=input_variables_values_test_datasets

# Create linear regression object
linear = linear_model.LinearRegression()

# Train the model using the training sets and check score
linear.fit(x_train, y_train)
linear.score(x_train, y_train)

#Equation coefficient and Intercept
print('Coefficient: \n', linear.coef_)
print('Intercept: \n', linear.intercept_)

#Predict Output
predicted= linear.predict(x_test)




##########################Rcode#############################################################
#Load Train and Test datasets
#Identify feature and response variable(s) and values must be numeric and numpy arrays
x_train <- input_variables_values_training_datasets
y_train <- target_variables_values_training_datasets
x_test <- input_variables_values_test_datasets
x <- cbind(x_train,y_train)
# Train the model using the training sets and check score
linear <- lm(y_train ~ ., data = x)
summary(linear)
#Predict Output
predicted= predict(linear,x_test) 
